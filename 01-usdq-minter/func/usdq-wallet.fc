;; SC working as USDQ wallet.
;; - Compliant with 'Fungible tokens (Jettons) standard'
;;       at https://github.com/ton-blockchain/TIPs/issues/74
;; (c) ProgramCrafter, 2022

;; Based on https://github.com/ton-blockchain/token-contract/blob/main/ft/jetton-wallet.fc

#include "func/usdq-as-jetton.fc";

int min_tons_for_storage() asm "10000000 PUSHINT"; ;; 0.01 TON
int gas_consumption() asm "10000000 PUSHINT"; ;; 0.01 TON

{-
  Storage:
    balance:         varuint16
    owner_addr:   MsgAddressInt
    master_addr:  MsgAddressInt
    wallet_code:     ^Cell
-}

(int, slice, slice, cell) load_data() {
  slice ds = get_data().begin_parse();
  return (ds~load_coins(), ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
}

() save_data(int balance, slice owner_addr, slice master_addr, cell usdq_wallet_code) impure inline {
  set_data(get_usdq_wallet_data(balance, owner_addr, master_addr, usdq_wallet_code));
}

{-
  transfer query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
           = InternalMsgBody;
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_addr:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

() send_stables(slice in_msg_body, slice sender_addr, int msg_value, int fwd_fee) impure {
  int   query_id      = in_msg_body~load_uint(64);
  int   nusdq_amount  = in_msg_body~load_coins();
  slice to_owner_addr = in_msg_body~load_msg_addr();
  
  (int balance, slice owner_addr, slice master_addr, cell usdq_wallet_code) = load_data();

  throw_unless(100, equal_slices(owner_addr, sender_addr));
  
  balance -= nusdq_amount;
  throw_unless(101, balance >= 0);
  
  cell    state_init      = get_usdq_wallet_state_init(to_owner_addr, master_addr, usdq_wallet_code);
  builder to_wallet_addr  = get_usdq_wallet_addr(state_init);
  slice   response_addr   = in_msg_body~load_msg_addr();
  cell    custom_payload  = in_msg_body~load_dict();
  int     forward_ton_amt = in_msg_body~load_coins();
  
  int fwd_count = forward_ton_amt ? 2 : 1;
  throw_if(102, msg_value <=
                     forward_ton_amt +
                     ;; reserving fees for 2 messages: wal1->wal2, wal2->owner, optional[wal2->response]
                     fwd_count * fwd_fee + (2 * gas_consumption() + min_tons_for_storage()));
  
  throw_if(103, slice_bits(in_msg_body) < 1);
  slice either_forward_payload = in_msg_body;
  
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_builder(to_wallet_addr)
    .store_coins(0)
    .store_uint(7,  1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(build_usdq_wallet_msg_body_incoming(query_id, nusdq_amount,
      owner_addr, response_addr, forward_ton_amt, either_forward_payload).end_cell())
    .end_cell();
  
  send_raw_message(msg, 64); ;; revert on error, carry remainder of TONs
  save_data(balance, owner_addr, master_addr, usdq_wallet_code);
}

{-
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_addr:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

() recv_stables(slice in_msg_body, slice sender_addr, int my_ton_balance, int fwd_fee, int msg_value) impure {
  (int balance, slice owner_addr, slice master_addr, cell usdq_wallet_code) = load_data();
  int query_id      = in_msg_body~load_uint(64);
  int nusdq_amount  = in_msg_body~load_coins();
  balance += nusdq_amount;
  slice from_addr     = in_msg_body~load_msg_addr();
  slice response_addr = in_msg_body~load_msg_addr();
  
  throw_unless(104,
      equal_slices(master_addr, sender_addr) |
      equal_slices(get_usdq_wallet_addr(get_usdq_wallet_state_init(
                     from_addr, master_addr, usdq_wallet_code
                   )).end_cell().begin_parse(),
                   sender_addr)
  );
  ;; message can be trusted as it comes from either master contract or verified wallet
  
  int forward_ton_amt = in_msg_body~load_coins();

  int ton_balance_before_msg = my_ton_balance - msg_value;
  int storage_fee = max(min_tons_for_storage() - ton_balance_before_msg, 0);
  msg_value -= storage_fee + gas_consumption();
  
  if (forward_ton_amt) {
    msg_value -= forward_ton_amt + fwd_fee;
    slice either_forward_payload = in_msg_body;

    var msg_body = begin_cell()
        .store_uint(0x7362d09c, 32)       ;; op::transfer_notification
        .store_uint(query_id, 64)
        .store_coins(nusdq_amount)
        .store_slice(from_addr)
        .store_slice(either_forward_payload)
        .end_cell();

    var msg = begin_cell()
      .store_uint(0x10, 6)                ;; non-bounceable
      .store_slice(owner_addr)
      .store_coins(forward_ton_amt)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 1);  ;; paying transfer fees separately
  }

  if ((response_addr.preload_uint(2) != 0) & (msg_value > 0)) {
    var msg = begin_cell()
      .store_uint(0x10, 6)                ;; non-bounceable
      .store_slice(response_addr)
      .store_coins(msg_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0xd53276db, 32)         ;; op::excesses
      .store_uint(query_id, 64);
    send_raw_message(msg.end_cell(), 2);  ;; ignoring errors
  }

  save_data(balance, owner_addr, master_addr, usdq_wallet_code);
}

() burn_stables(slice in_msg_body, slice sender_addr, int msg_value, int fwd_fee) impure {
  (int balance, slice owner_addr, slice master_addr, cell usdq_wallet_code) = load_data();
  int query_id = in_msg_body~load_uint(64);
  int nusdq_amount = in_msg_body~load_coins();
  slice response_addr = in_msg_body~load_msg_addr();
  
  balance -= nusdq_amount;
  throw_unless(105, equal_slices(owner_addr, sender_addr));
  throw_unless(106, balance >= 0);
  throw_unless(107, msg_value > fwd_fee + 2 * gas_consumption());

  var msg_body = begin_cell()
      .store_uint(0x7bdd97de, 32)         ;; op::burn_notification
      .store_uint(query_id, 64)
      .store_coins(nusdq_amount)
      .store_slice(owner_addr)
      .store_slice(response_addr)
      .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(master_addr)
    .store_coins(0)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), 64);

  save_data(balance, owner_addr, master_addr, usdq_wallet_code);
}

() on_bounce(slice in_msg_body) impure {
  in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
  
  int op = in_msg_body~load_uint(32);
  throw_unless(108, (op == 0x178d4519) | (op == 0x7bdd97de)); ;; internal transfer / burn notification
  int query_id = in_msg_body~load_uint(64);
  int nusdq_amount = in_msg_body~load_coins();
  
  (int balance, slice owner_addr, slice master_addr, cell usdq_wallet_code) = load_data();
  balance += nusdq_amount;
  save_data(balance, owner_addr, master_addr, usdq_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_bits() < 32) { ;; ignore empty messages
    return ();
  }

  slice in_msg_full = in_msg_full.begin_parse();
  if (in_msg_full~load_uint(4) & 1) {
    on_bounce(in_msg_body);
    return ();
  }
  
  slice sender_addr = in_msg_full~load_msg_addr();
  in_msg_full~load_msg_addr(); ;; skip dst == my_address
  in_msg_full~load_coins();    ;; skip value
  in_msg_full~load_dict();     ;; skip extracurrency collection
  in_msg_full~load_coins();    ;; skip ihr_fee
  int fwd_fee = in_msg_full~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_uint(32);

  if (op == 0xf8a7ea5) { ;; outgoing transfer
    send_stables(in_msg_body, sender_addr, msg_value, fwd_fee);
    return ();
  }

  if (op == 0x178d4519) { ;; incoming transfer
    recv_stables(in_msg_body, sender_addr, my_balance, fwd_fee, msg_value);
    return ();
  }

  if (op == 0x595f07bc) { ;; burn
    burn_stables(in_msg_body, sender_addr, msg_value, fwd_fee);
    return ();
  }

  return ();  ;; accepting unknown message
}

(int, slice, slice, cell) get_wallet_data() method_id {
  return load_data();
}
